#!/usr/bin/env node

const { log } = require('console');
var app = require('../app');
var debug = require('debug')('relayer:server');
var http = require('http');
var WebSocket = require('ws');

const GAME_SIZE = 5;
const WEREWOLVES = players => Math.floor(players/3 + 0.5);

const players=[];

const playerObj = {
  connected: false,
  registered: false,
  ready: false,
  pubkey: null,
  number: -1,
  liveness: null,
  powers: {},
  lastRoundMoved: -1,
  lastMove: null
};

const gameObj = {
  completedRound : 0,
  previousMoves : [],
  thisRoundMoves : [],
  players: [],
};

const characters = [
  'Sam Bankman-Fried', 'Gary Gensler', 'Changpeng Zhao', 'Three Arrows Capital', 'Jerome Powell'
];

let gameOn = false;


// start server
var port = normalizePort(process.env.PORT || '4444');
app.set('port', port);
var server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Create WebSocket server.
const wss = new WebSocket.Server({ server, clientTracking: true });
const MAX_CONNECTIONS = 16;
let activeConnections = 0;

// onconnect, onmessage listeners
wss.on('connection', function connection(ws) {
  console.log('Connection attempted');
  if (activeConnections >= MAX_CONNECTIONS) {
    ws.close(1008, 'Too many connections'); // 1008 is a policy violation
    return;
  }

  activeConnections++;
  console.log(`New connection established. Active connections: ${activeConnections}`);

  ws.on('close', function close() {
    ws.player.connected = false;
    activeConnections--;
    console.log(`Connection closed. Active connections: ${activeConnections}`);
  });

  ws.on('message', function incoming(message) {
    console.log('received: %s', message);
    handleMessage(message.toString(), ws);
  });

  ws.player = Object.assign({}, playerObj);
  ws.player.connected = true;
  ws.player.number = players.length;
  players.push(ws.player);

  ws.send ('REQUEST_PUBKEY');
});



const handleMessage = (message, client)=> {
  console.log ('Got a message:', message);
  console.log ('Client state:', client.player);
  
  if (message==="REQUEST_SELF") {
    if (gameOn) {
      client.send({
        messageType: 'RESPOND_SELF',
        player: client.number,
        character: character[client.number],
        pubkey: client.pubkey,
        liveness: client.liveness,
        lastRoundMoved: client.lastRoundMoved,
        lastMove: client.lastMove
      })
    };
  };

  if (message==="REQUEST_GAME_STATE") {
    if (gameOn) {
      Array.from(wss.clients).forEach((client, idx) => {client.number=idx })
      const playerNumbers =  Array.from(wss.clients).map(client => client.number);
      // TODO : lastFullRound
      // TODO: all last moves
      // TODO: players liveness
      client.send({
        messageType: 'RESPOND_GAME_STATE',
        gameState: initialGameState,
        self: {
          pubkey: client.pubkey,
          player: client.number,
          liveness: client.liveness,
          character: characters[client.number]
        }

      })
    };
  };

  if (message==="REQUEST_SPECIAL_POWERS") {
    client.send(JSON.stringify({
      messageType: 'RESPOND_SHOW_POWERS',
      powers: client.player.powers
    }));
    return;
  }

  try {
    const msgJson = JSON.parse(message);
    console.log(msgJson)
    if (msgJson.pubkey) {
      client.player.pubkey = msgJson.pubkey;
      client.send('WAITING');
      // TODO: Check chain for player and update ws.player.registered if they are
      // then call checkReady()
    }
    if (msgJson.ready) {
      if (client.player.registered && client.player.pubkey) {
        client.player.ready = true;
      } else {
        // Uncomment (and implement!) to require registration on contract before playing
        // TODO: await check chain for player and update ws.player.registered if they are.
        if (client.player.pubkey) {
          client.player.ready = true
        } else {
          client.send('REQUEST_PUBKEY');
          console.log('REQUEST_PUBKEY');
        };
      }

      if (client.player.ready)
        checkReady();
    }
  } catch (e) {
    console.log('(errored):' );
    if (e.message.indexOf('JSON.,parse')>-1) {
      console.log('Unhandled string message');
    }
    if (message==='[object Object]') {
      console.log("WS message appears to be '[object Object]'. Mostly likely due to incorrect stringification of Array/ Object on client side")
    } else {
    console.log('message:', message);
    console.log(e);
    }
  }
}

const checkReady = ()=> {
  // console.log(`\n\n\n\nClients: ${wss.clients.size }`);
  // console.log(`Ready: ${Array.from(wss.clients).filter(client => client.player.ready).length}`);
  // console.log(`\n\nUnready: `,Array.from(wss.clients).filter(client => !client.player.ready).map(client=>client.player));
  // console.log(`\n\nReady: `,Array.from(wss.clients).filter(client => client.player.ready).map(client=>client.player));

  if (wss.clients.size < GAME_SIZE
    || Array.from(wss.clients).filter(client => client.player.ready && client.player.pubkey).length < GAME_SIZE)
      return false
  else
    initiateGame();  
    // NB checkReady() would return with undefined without initiating game if 
    // there are somehow < GAME_SIZE clients still open after unready ones are closed.
}

const initiateGame = ()=> {
  Array.from(wss.clients)
    .filter(client => !client.player.ready)
    .forEach(client=> {
      client.close();
    })

  if (wss.clients.length < GAME_SIZE) {
    return
  }

  const clients = Array.from(wss.clients).filter(client => client.player.ready);
  const players = clients.map(client=>client.player);
  console.log('Game starting. Players: ', players.map(player=>player.number).join(', '));
  
  // choose players/3 werewolves
  let werewolves = new Set();
  while (werewolves.size < WEREWOLVES(players.length)) {
    werewolves.add(Math.floor(Math.random () * players.length));
  }
  werewolves.forEach(idx=> players[idx].powers = { secretVotePower: 100 } );
    
  // set initial liveness & publicVotingPower - same for everyone
  players.forEach( player => {
    console.log('player', player)
    player.liveness = 100;
  });
  const initialGameState = new Array(players.length).fill({
    liveness : 100,
    publicVotingPower : 100
  })

  // wake players
  clients.forEach( client => {
    client.send(JSON.stringify({
      messageType: 'RESPOND_GAME_STATE',
      gameState: initialGameState,
      self: {
        pubkey: client.player.pubkey,
        player: client.player.number,
        liveness: client.player.liveness,
        character: characters[client.player.number]
        // we don't send (secret) powers to sit around in frontend state, to prevent coercion
      }
    }))
  })

  gameOn = true;
}


// Normalize a port into a number, string, or false.
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  console.log('got some kind of error')
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('WebSocket server is listening on ' + bind);
}
